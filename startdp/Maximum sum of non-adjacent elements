Maximum sum of non-adjacent elements
Difficulty: MEDIUM
Contributed By
Deep Mavani
|
Level 1
Avg. time to solve
15 min
Success Rate
85%
Problem Statement
Sample Input 1:
2
3
1 2 4
4
2 1 4 9
Sample Output 1:
5
11
Explanation To Sample Output 1:
In test case 1, the sum of 'ARR[0]' & 'ARR[2]' is 5 which is greater than 'ARR[1]' which is 2 so the answer is 5.

In test case 2, the sum of 'ARR[0]' and 'ARR[2]' is 6, the sum of 'ARR[1]' and 'ARR[3]' is 10, and the sum of 'ARR[0]' and 'ARR[3]' is 11. So if we take the sum of 'ARR[0]' and 'ARR[3]', it will give the maximum sum of sequence in which no elements are adjacent in the given array/list.
Sample Input 2:
2
5
1 2 3 5 4
9
1 2 3 1 3 5 8 1 9
Sample Output 2:
8
24
Explanation To Sample Output 2:
In test case 1, out of all the possibilities, if we take the sum of 'ARR[0]', 'ARR[2]' and 'ARR[4]', i.e. 8, it will give the maximum sum of sequence in which no elements are adjacent in the given array/list.

In test case 2, out of all the possibilities, if we take the sum of 'ARR[0]', 'ARR[2]', 'ARR[4]', 'ARR[6]' and 'ARR[8]', i.e. 24 so, it will give the maximum sum of sequence in which no elements are adjacent in the given array/list.


=====================================================================================================================================================================================================================================================================================

#include<bits/stdc++.h>
int solve(vector<int> & nums,int i,vector<int> &dp){
 if(i<=0)
 {
     if(i==0)
         return nums[i];
     else
         return 0;
 }
    if(dp[i]!=-1)
        return dp[i];
    int pick=nums[i]+solve(nums,i-2,dp);
    int not_pick=0+solve(nums,i-1,dp);
    return dp[i]=max(pick,not_pick);
}
int maximumNonAdjacentSum(vector<int> &nums){
    int n=nums.size();
    vector<int> dp(n,-1);
    return solve(nums,n-1,dp);
}
