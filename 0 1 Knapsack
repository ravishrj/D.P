0 1 Knapsack
Difficulty: EASY
Contributed By
Anup Kumar Singh
|
Level 1
Avg. time to solve
15 min
Success Rate
85%
Problem Statement
A thief is robbing a store and can carry a maximal weight of W into his knapsack. There are N items and the ith item weighs wi and is of value vi. Considering the constraints of the maximum weight that a knapsack can carry, you have to find and return the maximum value that a thief can generate by stealing items.
Input Format:
The first line contains a single integer T representing the number of test cases.      
The T-test cases are as follows:

Line 1:The first line contains an integer, that denotes the value of N. 
Line 2:The following line contains N space-separated integers, that denote the values of the weight of items. 
Line 3:The following line contains N space-separated integers, that denote the values associated with the items. 
Line 4:The following line contains an integer that denotes the value of W. W denotes the maximum weight that a thief can carry.
Output Format :
The first and only line of output contains the maximum value that a thief can generate, as described in the task. 
The output of every test case is printed in a separate line.
Constraints:
1 <= T <= 10
1 <= N <= 10^2
1<= wi <= 50
1 <= vi <= 10^2
1 <= W <= 10^3

Time Limit: 1 second
Follow Up:
Can we solve this using space complexity of not more than O(W)?
Sample Input:
1 
4
1 2 4 5
5 4 8 6
5
Sample Output:
13


=========================================================================================================================================================================


int solve(int i,vector<int> &weight, vector<int> &value,  int maxWeight,vector<vector<int>> dp)
{
    if(i==0)
    {
        if(weight[0]<=maxWeight)
        {
            return value[0];
        }
        else
         return 0;
    }
    if(dp[i][maxWeight]!=-1)
        return dp[i][maxWeight];
    int notpick=0+solve(i-1,weight,value,maxWeight,dp);
    int pick=INT_MIN;
    if(weight[i]<=maxWeight)
     pick=value[i]+solve(i-1,weight,value,maxWeight-weight[i],dp);
    return dp[i][maxWeight]=max(pick,notpick);
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{ 
//     vector<vector<int>> dp(n,vector<int>(maxWeight+1,-1));
//      return solve(n-1,weight,value,maxWeight,dp);
    vector<vector<int>> dp(n,vector<int>(maxWeight+1,0));
    for(int w=weight[0];w<=maxWeight;w++)
    {
        
        dp[0][w]=value[0];
    }
    for(int i=1;i<n;i++)
    {
        for(int w=0;w<=maxWeight;w++)
        {
            int notpick=0,pick=-1e8;
            notpick=0+dp[i-1][w];
            if(weight[i]<=w)
            {
                pick=value[i]+dp[i-1][w-weight[i]];
            }
            dp[i][w]=max(notpick,pick);
        }
    }
    return dp[n-1][maxWeight];
}
