583. Delete Operation for Two Strings
Medium

3479

54

Add to List

Share
Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.

 

Example 1:

Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
Example 2:

Input: word1 = "leetcode", word2 = "etco"
Output: 4
 

Constraints:

1 <= word1.length, word2.length <= 500
word1 and word2 consist of only lowercase English letters.
Accepted
139,915
Submissions
243,492
Seen this question in a real interview before?

Yes

No

Problems
=========================================================================================================================================


class Solution {
public:
    
    //MEMOIZATION
    int solve(int i,int j,string st1,string st2,vector<vector<int>>& dp)
    {
        if(i<0)
        {
            return j+1;
        }
        if(j<0)
        {
            return i+1;
        }
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(st1[i]==st2[j])
        {
            return dp[i][j]=(0+solve(i-1,j-1,st1,st2,dp));
        }
        else
        {
           return dp[i][j]=(1+min(solve(i-1,j,st1,st2,dp),solve(i,j-1,st1,st2,dp)));
        }
          
    }
    int minDistance(string word1, string word2) {
        int n1=word1.size(),n2=word2.size();
        // vector<vector<int>> dp(n1,vector<int>(n2,-1));
        // return solve(word1.size()-1,word2.size()-1,word1,word2,dp);
        
        //TABULATION
                vector<vector<int>> dp(n1+1,vector<int>(n2+1,0));
        for(int j=0;j<=n2;j++)
            dp[0][j]=j;
         for(int i=0;i<=n1;i++)
            dp[i][0]=i;
        for(int i=1;i<=n1;i++)
        {
            for(int j=1;j<=n2;j++)
            {
                 if(word1[i-1]==word2[j-1])
                  {
                    dp[i][j]=0+dp[i-1][j-1];
                  }
                  else
                  {
                      dp[i][j]=1+min(dp[i-1][j],dp[i][j-1]);
                   }
            }
        }
        return dp[n1][n2];
    }
};
